{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello User! With this programm you will be able to choose between a variety of public stocks from different exchanges before easily analysing the underlying company.\n",
      "Please enter your individual API-Key from Financial Modelling Prep in order to access the data (e.g. 4e20e35a9763edf292366927d58a3614):4e20e35a9763edf292366927d58a3614\n",
      "\n",
      "These are the exchanges:\n",
      "    exchange\n",
      "0       NYSE\n",
      "1   NasdaqCM\n",
      "2   NasdaqGM\n",
      "3   NasdaqGS\n",
      "4  Other OTC\n",
      "\n",
      "Enter the name of the exchange you want to see in detail (e.g. NYSE): NYSE\n",
      "\n",
      "These are the available stocks in NYSE :\n",
      "\n",
      "                                                 name   symbol\n",
      "0                             AMTD International Inc.     HKIB\n",
      "1                               APi Group Corporation      APG\n",
      "2                        AXA Equitable Holdings, Inc.      EQH\n",
      "3                           Accel Entertainment, Inc.     ACEL\n",
      "4                     Affiliated Managers Group, Inc.      MGR\n",
      "5                                         Alcon, Inc.      ALC\n",
      "6                     Algonquin Power & Utilities Cor     AQNB\n",
      "7                     Algonquin Power & Utilities Cor     AQNA\n",
      "8                  Alpine Income Property Trust, Inc.     PINE\n",
      "9                           Alta Equipment Group Inc.     ALTG\n",
      "10                    Alussa Energy Acquisition Corp.     ALUS\n",
      "11                                          Amcor plc     AMCR\n",
      "12                     American Financial Group, Inc.     AFGC\n",
      "13                     American Financial Group, Inc.     AFGE\n",
      "14                    American Financial Group, Inc.      AFGB\n",
      "15                            Amira Nature Foods Ltd.     RYCE\n",
      "16                       Amneal Pharmaceuticals, Inc.     AMRX\n",
      "17                               Amplify Energy Corp.     AMPY\n",
      "18                                      Anaplan, Inc.     PLAN\n",
      "19   Angel Oak Financial Strategies Income Term Trust     FINS\n",
      "20                                 Apergy Corporation      APY\n",
      "21                                        Aphria Inc.     APHA\n",
      "22                                 Aqua America, Inc.     WTRU\n",
      "23                                       Arcosa, Inc.      ACA\n",
      "24            Argo Group International Holdings, Ltd.     ARGO\n",
      "25                            Arlo Technologies, Inc.     ARLO\n",
      "26                 AssetMark Financial Holdings, Inc.      AMK\n",
      "27                                            Atest A  ATEST-A\n",
      "28                                            Atest B  ATEST-B\n",
      "29                                        Atlas Corp.     ATCO\n",
      "30                               Aurora Cannabis Inc.      ACB\n",
      "31                                      Avalara, Inc.     AVLR\n",
      "32                               Avanos Medical, Inc.     AVNS\n",
      "33                                      Avantor, Inc.     AVTR\n",
      "34                               Axos Financial, Inc.       AX\n",
      "35                    B. Riley Principal Merger Corp.     BRPM\n",
      "36                                          BEST Inc.     BEST\n",
      "37                 BJ's Wholesale Club Holdings, Inc.       BJ\n",
      "38               Bain Capital Specialty Finance, Inc.     BCSF\n",
      "39                               Baker Hughes Company      BKR\n",
      "40                          Banco BBVA Argentina S.A.     BBAR\n",
      "41                                  Barings BDC, Inc.     BBDC\n",
      "42                       Bausch Health Companies Inc.      BHC\n",
      "43                              BellRing Brands, Inc.     BRBR\n",
      "44                            Berkshire Hathaway Inc.     BRKA\n",
      "45                            Berkshire Hathaway Inc.     BRKB\n",
      "46                            Berkshire Hathaway Inc.    BRK-A\n",
      "47                            Berkshire Hathaway Inc.    BRK-B\n",
      "48                              Biglari Holdings Inc.     BH-A\n",
      "49                            Bill.com Holdings, Inc.     BILL\n",
      "50                         Bio-Rad Laboratories, Inc.    BIO-B\n",
      "51                 BlackRock Health Sciences Trust II     BMEZ\n",
      "52          BlackRock Science and Technology Trust II     BSTZ\n",
      "53                           Bloom Energy Corporation       BE\n",
      "54                              Borr Drilling Limited     BORR\n",
      "55                     Braemar Hotels & Resorts, Inc.      BHR\n",
      "56                             Brigham Minerals, Inc.     MNRL\n",
      "57                 BrightSphere Investment Group Inc.     BSIG\n",
      "58                  BrightSphere Investment Group plc      BSA\n",
      "59                          BrightView Holdings, Inc.       BV\n",
      "60                            Bristol-Myers Squibb Co    BMY-R\n",
      "61                        Bristol-Myers Squibb Co. Rt   CELG-R\n",
      "62                      Broadmark Realty Capital Inc.     BRMK\n",
      "63              Brookfield Infrastructure Corporation     BIPC\n",
      "64                           Brown-Forman Corporation     BF-A\n",
      "65                           Brown-Forman Corporation     BF-B\n",
      "66                    CBO (Listing Market - NYSE - Ne      CBO\n",
      "67                                                CBX      CBX\n",
      "68                         CNFinance Holdings Limited      CNF\n",
      "69                                         Cango Inc.     CANG\n",
      "70                            CannTrust Holdings Inc.     CTST\n",
      "71                          Canopy Growth Corporation      CGC\n",
      "72                             Capri Holdings Limited     CPRI\n",
      "73                         Carrier Global Corporation     CARR\n",
      "74                                  Casper Sleep Inc.     CSPR\n",
      "75   Centrais Eletricas Brasileiras S.A. - Eletrobras    EBR-B\n",
      "76                          Ceridian HCM Holding Inc.     CDAY\n",
      "77                             Chaparral Energy, Inc.     CHAP\n",
      "78                             Charah Solutions, Inc.     CHRA\n",
      "79                                        Chewy, Inc.     CHWY\n",
      "80                          Churchill Capital Corp II      CCX\n",
      "81                         Churchill Capital Corp III     CCXX\n",
      "82                            Clarivate Analytics Plc      CCC\n",
      "83                              Clearway Energy, Inc.     CWEN\n",
      "84                              Clearway Energy, Inc.   CWEN-A\n",
      "85                                   Cloudflare, Inc.      NET\n",
      "86                    Coca-Cola European Partners plc     CCEP\n",
      "87                                 Colfax Corporation     CFXA\n",
      "88                             Collier Creek Holdings      CCH\n",
      "89                               Colony Capital, Inc.     CLNY\n",
      "90               Companhia Energetica de Minas Gerais    CIG-C\n",
      "91                         Constellation Brands, Inc.    STZ-B\n",
      "92                               Contura Energy, Inc.     CTRA\n",
      "93                               CooTek (Cayman) Inc.      CTK\n",
      "94                             CorePoint Lodging Inc.     CPLG\n",
      "95                  Cornerstone Building Brands, Inc.      CNR\n",
      "96                                      Corteva, Inc.     CTVA\n",
      "97                         Covia Holdings Corporation     CVIA\n",
      "98                                 Crawford & Company    CRD-A\n",
      "99                                 Crawford & Company    CRD-B\n",
      "100                           Cushman & Wakefield plc      CWK\n",
      "101                            Dell Technologies Inc.     DELL\n",
      "102                              Designer Brands Inc.      DBI\n",
      "103                           Diamond S Shipping Inc.     DSSI\n",
      "104                             Dominion Energy, Inc.     DCUE\n",
      "105                                          Dow Inc.      DOW\n",
      "106                           DuPont de Nemours, Inc.       DD\n",
      "107                                   Dynatrace, Inc.       DT\n",
      "108                   Eagle Point Income Company Inc.      EIC\n",
      "109                   Elanco Animal Health Incorporat     ELAT\n",
      "110                 Elanco Animal Health Incorporated     ELAN\n",
      "111                                      Elastic N.V.     ESTC\n",
      "112                             Element Solutions Inc      ESI\n",
      "113                         Embotelladora Andina S.A.    AKO-A\n",
      "114                         Embotelladora Andina S.A.    AKO-B\n",
      "115                    Enbridge Inc. 6.375 SNT18 B 78     ENBA\n",
      "116                                        Endava plc     DAVA\n",
      "117                                Energy Transfer LP       ET\n",
      "118                          Enerpac Tool Group Corp.     EPAC\n",
      "119                      Envista Holdings Corporation     NVST\n",
      "120                                       Equinor ASA     EQNR\n",
      "121                   Equitrans Midstream Corporation     ETRN\n",
      "122           Essential Properties Realty Trust, Inc.     EPRT\n",
      "123                         Essential Utilities, Inc.     WTRG\n",
      "124                                  Eventbrite, Inc.       EB\n",
      "125                                      Evergy, Inc.     EVRG\n",
      "126                             Exantas Capital Corp.      XAN\n",
      "127                              FS KKR Capital Corp.      FSK\n",
      "128                 Far Point Acquisition Corporation     FPAC\n",
      "129                                  Farfetch Limited     FTCH\n",
      "130                                      Fastly, Inc.     FSLY\n",
      "131         Federal Agricultural Mortgage Corporation    AGM-A\n",
      "132                            Federated Hermes, Inc.      FHI\n",
      "133                                 FinVolution Group     FINV\n",
      "134                         Fiverr International Ltd.     FVRR\n",
      "135                                     Flex LNG Ltd.     FLNG\n",
      "136                    Flying Eagle Acquisition Corp.     FEAC\n",
      "137                            GFL Environmental Inc.      GFL\n",
      "138                            GFL Environmental Inc.     GFLU\n",
      "139                                GIGCAPITAL2 INC/SH    GIX-R\n",
      "140                      GS Acquisition Holdings Corp     GSAH\n",
      "141                                  GSX Techedu Inc.      GSX\n",
      "142                                 Galiano Gold Inc.      GAU\n",
      "143                         Galileo Acquisition Corp.     GLEO\n",
      "144                               Garrett Motion Inc.      GTX\n",
      "145                                 GigCapital2, Inc.      GIX\n",
      "146                                   Globe Life Inc.       GL\n",
      "147                             Graf Industrial Corp.     GRAF\n",
      "148                       GrafTech International Ltd.      EAF\n",
      "149                   Granite Real Estate Inc. Staple    GRP-U\n",
      "150                             Gray Television, Inc.    GTN-A\n",
      "151                  GreenTree Hospitality Group Ltd.      GHG\n",
      "152                                       Greif, Inc.    GEF-B\n",
      "153                                 HEICO Corporation    HEI-A\n",
      "154                                        HEXO Corp.     HEXO\n",
      "155                                         HUYA Inc.     HUYA\n",
      "156                                      Hanger, Inc.     HNGR\n",
      "157                 Haverty Furniture Companies, Inc.    HVT-A\n",
      "158                       Healthpeak Properties, Inc.     PEAK\n",
      "159                    Healthy Harmony Holdings, L.P.      NFH\n",
      "160                            Hercules Capital, Inc.     HCXY\n",
      "161                            Hercules Capital, Inc.     HCXZ\n",
      "162                  Hermitage Offshore Services Ltd.      PSV\n",
      "163                                     Hi-Crush Inc.      HCR\n",
      "164                   HighPoint Resources Corporation      HPR\n",
      "165                             Howmet Aerospace Inc.      HWM\n",
      "166                Hunt Companies Finance Trust, Inc.     HCFT\n",
      "167                                         IAA, Inc.      IAA\n",
      "168                                  Ibo Common Stock      IBO\n",
      "169                     Inspire Medical Systems, Inc.     INSP\n",
      "170                    InterPrivate Acquisition Corp.      IPV\n",
      "171                 Intercorp Financial Services Inc.      IFS\n",
      "172                   International Flavors & Fragran     IFFT\n",
      "173                     Jacobs Engineering Group Inc.        J\n",
      "174                    Jefferies Financial Group Inc.      JEF\n",
      "175                           John Wiley & Sons, Inc.     JW-A\n",
      "176                           John Wiley & Sons, Inc.     JW-B\n",
      "177                             Jumia Technologies AG     JMIA\n",
      "178                 Juniper Industrial Holdings, Inc.      JIH\n",
      "179                             Keurig Dr Pepper Inc.      KDP\n",
      "180                              Kontoor Brands, Inc.      KTB\n",
      "181                       L3Harris Technologies, Inc.      LHX\n",
      "182                                         LAIX Inc.     LAIX\n",
      "183                     LGL Systems Acquisition Corp.     DFNS\n",
      "184                                   Leaf Group Ltd.     LEAF\n",
      "185                                Lennar Corporation    LEN-B\n",
      "186                                Leo Holdings Corp.      LHC\n",
      "187                                Levi Strauss & Co.     LEVI\n",
      "188                                         Linde plc      LIN\n",
      "189                                         Linx S.A.     LINX\n",
      "190                    Lions Gate Entertainment Corp.    LGF-A\n",
      "191                    Lions Gate Entertainment Corp.    LGF-B\n",
      "192                           LiveRamp Holdings, Inc.     RAMP\n",
      "193                                Livent Corporation     LTHM\n",
      "194                                         MOGU Inc.     MOGU\n",
      "195         Madison Square Garden Entertainment Corp.     MSGE\n",
      "196                Madison Square Garden Sports Corp.     MSGS\n",
      "197                    Magnolia Oil & Gas Corporation      MGY\n",
      "198                Mayville Engineering Company, Inc.      MEC\n",
      "199                 McCormick & Company, Incorporated    MKC-V\n",
      "200                                    Medallia, Inc.     MDLA\n",
      "201              Megalith Financial Acquisition Corp.     MFAC\n",
      "202              Mitsubishi UFJ Financial Group, Inc.     MUFG\n",
      "203                      Molson Coors Brewing Company    TAP-A\n",
      "204                     Montage Resources Corporation       MR\n",
      "205                                         Moog Inc.    MOG-B\n",
      "206                                         Moog Inc.    MOG-A\n",
      "207                                       NIO Limited      NIO\n",
      "208                                     NYSE Test One    CTEST\n",
      "209                   National Rural Utilities Cooper     NRUC\n",
      "210                           Natura &Co Holding S.A.     NTCO\n",
      "211                              Nesco Holdings, Inc.     NSCO\n",
      "212                   New Frontier Health Corporation      NFC\n",
      "213                  New Mountain Finance Corporation     NMFX\n",
      "214                NexPoint Real Estate Finance, Inc.     NREF\n",
      "215                   NexTier Oilfield Solutions Inc.      NEX\n",
      "216                         Oaktree Acquisition Corp.      OAC\n",
      "217                                           Oi S.A.   OIBR-C\n",
      "218         OneConnect Financial Technology Co., Ltd.     OCFT\n",
      "219    OneSmart International Education Group Limited      ONE\n",
      "220                              Onto Innovation Inc.     ONTO\n",
      "221               Osprey Technology Acquisition Corp.     SFTW\n",
      "222                        Otis Worldwide Corporation     OTIS\n",
      "223                                      Ovintiv Inc.      OVV\n",
      "224                      Owl Rock Capital Corporation     ORCC\n",
      "225                             Pacific Drilling S.A.     PACD\n",
      "226                                   PagerDuty, Inc.       PD\n",
      "227                               Parsons Corporation      PSN\n",
      "228                            PermRock Royalty Trust      PRT\n",
      "229                        Permianville Royalty Trust      PVL\n",
      "230                                    Perspecta Inc.     PRSP\n",
      "231              Petroleo Brasileiro S.A. - Petrobras    PBR-A\n",
      "232                     Phoenix Tree Holdings Limited      DNK\n",
      "233                                    Phreesia, Inc.      PHR\n",
      "234                       Ping Identity Holding Corp.     PING\n",
      "235                                   Pinterest, Inc.     PINS\n",
      "236                           Piper Sandler Companies     PIPR\n",
      "237                         Pivotal Acquisition Corp.      PVT\n",
      "238                 Pivotal Investment Corporation II      PIC\n",
      "239                            Pivotal Software, Inc.     PVTL\n",
      "240                         Postal Realty Trust, Inc.     PSTL\n",
      "241                             ProSight Global, Inc.     PROS\n",
      "242                      Prospect Capital Corporation      PBY\n",
      "243                   Prospect Capital Corporation 6.      PBC\n",
      "244                   Prudential Financial, Inc. 5.62      PRS\n",
      "245                                     Puxin Limited      NEW\n",
      "246                         Pyxus International, Inc.      PYX\n",
      "247                                    Qwest Corp. NT      CTZ\n",
      "248                           Qwest Corp. NT 10/01/54      CTV\n",
      "249                             RMG Acquisition Corp.      RMG\n",
      "250                             RTW Retailwinds, Inc.      RTW\n",
      "251                          Ra Medical Systems, Inc.     RMED\n",
      "252                             Rafael Holdings, Inc.      RFL\n",
      "253                             Ranpak Holdings Corp.     PACK\n",
      "254                Raytheon Technologies Corporation       RTX\n",
      "255                         Ready Capital Corporation       RC\n",
      "256                         Ready Capital Corporation      RCB\n",
      "257                          Replay Acquisition Corp.     RPLA\n",
      "258                        Resideo Technologies, Inc.     REZI\n",
      "259                                 Retail Value Inc.      RVI\n",
      "260                               Revolve Group, Inc.     RVLV\n",
      "261        RiverNorth Marketplace Lending Corporation      RSF\n",
      "262                              Roan Resources, Inc.     ROAN\n",
      "263                             Royal Dutch Shell plc    RDS-A\n",
      "264                             Royal Dutch Shell plc    RDS-B\n",
      "265                             SC Health Corporation     SCPE\n",
      "266                                        SCVX Corp.     SCVX\n",
      "267                                     SEMPRA ENERGY     SREA\n",
      "268                                SITE Centers Corp.     SITC\n",
      "269                   Saratoga Investment Corp. NT 23      SAB\n",
      "270                               Scully Royalty Ltd.      SRL\n",
      "271                 Sculptor Capital Management, Inc.      SCU\n",
      "272                    Silvergate Capital Corporation       SI\n",
      "273                          Slack Technologies, Inc.     WORK\n",
      "274                                   Smartsheet Inc.     SMAR\n",
      "275                            SolarWinds Corporation      SWI\n",
      "276                      South Jersey Industries, Inc     SJIJ\n",
      "277          South Jersey Industries, Inc. CORP UNITS     SJIU\n",
      "278                   Southern Company (The) 2019 Ser     SOLN\n",
      "279                   Southern Company (The) Series 2     SOJD\n",
      "280                  Spartan Energy Acquisition Corp.     SPAQ\n",
      "281                                   Spirit MTA REIT     SMTA\n",
      "282                           Spotify Technology S.A.     SPOT\n",
      "283                        Stanley Black & Decker Inc      SWT\n",
      "284        Studio City International Holdings Limited      MSC\n",
      "285                         Sunlands Technology Group      STG\n",
      "286                 Sunnova Energy International Inc.     NOVA\n",
      "287                                      SuperMontage      ZVV\n",
      "288                                       Suzano S.A.      SUZ\n",
      "289         Switchback Energy Acquisition Corporation      SBE\n",
      "290                            TFI International Inc.     TFII\n",
      "291             Takeda Pharmaceutical Company Limited      TAK\n",
      "292                              Tallgrass Energy, LP      TGE\n",
      "293                                 Talos Energy Inc.     TALO\n",
      "294                 Tencent Music Entertainment Group      TME\n",
      "295              The Southern Company JR SUB NT 2015A     SOJA\n",
      "296                       Tick Pilot Test Sym-Control    NTEST\n",
      "297                        Tortoise Acquisition Corp.     SHLL\n",
      "298                            Trane Technologies plc       TT\n",
      "299                           Trine Acquisition Corp.     TRNE\n",
      "300                      Truist Financial Corporation      TFC\n",
      "301                  Tufin Software Technologies Ltd.     TUFN\n",
      "302               Twin River Worldwide Holdings, Inc.     TRWH\n",
      "303                     U.S. Xpress Enterprises, Inc.      USX\n",
      "304                           Uber Technologies, Inc.     UBER\n",
      "305                                     Ubiquiti Inc.       UI\n",
      "306   United States Cellular Corporation SR NT 120163      UZB\n",
      "307                                       Valaris plc      VAL\n",
      "308                                   Vapotherm, Inc.     VAPO\n",
      "309                          Velocity Financial, Inc.      VEL\n",
      "310                                     Veoneer, Inc.      VNE\n",
      "311                                  Versum Materials      IGZ\n",
      "312                              Vertiv Holdings, LLC      VRT\n",
      "313                                    ViacomCBS Inc.    CBS-A\n",
      "314                    Virgin Galactic Holdings, Inc.     SPCE\n",
      "315                   Vista Oil & Gas, S.A.B. de C.V.     VIST\n",
      "316                           Vivint Smart Home, Inc.     VVNT\n",
      "317                                      Watsco, Inc.    WSO-B\n",
      "318                                       Weidai Ltd.      WEI\n",
      "319                        Wyndham Destinations, Inc.     WYND\n",
      "320                    Wyndham Hotels & Resorts, Inc.       WH\n",
      "321                                       X Financial      XYF\n",
      "322                   Xtrackers Bloomberg Barclays US     ESCR\n",
      "323                   Xtrackers J.P. Morgan ESG Emerg     ESEB\n",
      "324                   Xtrackers J.P. Morgan ESG USD H     ESHY\n",
      "325                               YETI Holdings, Inc.     YETI\n",
      "326                                      Youdao, Inc.      DAO\n",
      "327                            ZTEST Electronics Inc.    ZTEST\n",
      "328                                       Zuora, Inc.      ZUO\n",
      "329                                nVent Electric plc      NVT\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the symbol of the company you would like to analyse (e.g. AAPL): AAPL\n",
      "\n",
      "\n",
      "AAPL Balance Sheet 2019\n",
      "date                            index  in million $ % of Total Assets\n",
      "1           Cash and cash equivalents     48844.000            14.43%\n",
      "2              Short-term investments     51713.000            15.28%\n",
      "3     Cash and short-term investments    100557.000            29.71%\n",
      "4                         Receivables     22926.000             6.77%\n",
      "5                         Inventories      4106.000             1.21%\n",
      "6                Total current assets    162819.000            48.10%\n",
      "7     Property, Plant & Equipment Net     37378.000            11.04%\n",
      "8      Goodwill and Intangible Assets         0.000             0.00%\n",
      "9               Long-term investments    105341.000            31.12%\n",
      "10                         Tax assets         0.000             0.00%\n",
      "11           Total non-current assets    175697.000            51.90%\n",
      "12                       Total assets    338516.000           100.00%\n",
      "13                           Payables     46236.000            13.66%\n",
      "14                    Short-term debt     10260.000             3.03%\n",
      "15          Total current liabilities    105718.000            31.23%\n",
      "16                     Long-term debt     91807.000            27.12%\n",
      "17                         Total debt    102067.000            30.15%\n",
      "18                   Deferred revenue      5522.000             1.63%\n",
      "19                    Tax Liabilities         0.000             0.00%\n",
      "20                Deposit Liabilities         0.000             0.00%\n",
      "21      Total non-current liabilities    142310.000            42.04%\n",
      "22                  Total liabilities    248028.000            73.27%\n",
      "23         Other comprehensive income     40730.764            12.03%\n",
      "24        Retained earnings (deficit)     45898.000            13.56%\n",
      "25          Total shareholders equity     90488.000            26.73%\n",
      "26                        Investments    157054.000            46.39%\n",
      "27                           Net Debt     53223.000            15.72%\n",
      "28                       Other Assets         0.000             0.00%\n",
      "29                  Other Liabilities         0.000             0.00%\n",
      "\n",
      "AAPL Income Statement 2019\n",
      "date                             index  in million $ % of Total Revenues\n",
      "1                              Revenue  2.601740e+05             100.00%\n",
      "2                       Revenue Growth -2.041078e-08              -0.00%\n",
      "3                      Cost of Revenue  1.617820e+05              62.18%\n",
      "4                         Gross Profit  9.839200e+04              37.82%\n",
      "5                         R&D Expenses  1.621700e+04               6.23%\n",
      "6                         SG&A Expense  1.824500e+04               7.01%\n",
      "7                   Operating Expenses  3.446200e+04              13.25%\n",
      "8                     Operating Income  6.393000e+04              24.57%\n",
      "9                     Interest Expense  3.576000e+03               1.37%\n",
      "10                 Earnings before Tax  6.573700e+04              25.27%\n",
      "11                  Income Tax Expense  1.048100e+04               4.03%\n",
      "12    Net Income - Non-Controlling int  0.000000e+00               0.00%\n",
      "13       Net Income - Discontinued ops  0.000000e+00               0.00%\n",
      "14                          Net Income  5.525600e+04              21.24%\n",
      "15                 Preferred Dividends  0.000000e+00               0.00%\n",
      "16                      Net Income Com  5.525600e+04              21.24%\n",
      "17                                 EPS  1.197000e-05               0.00%\n",
      "18                         EPS Diluted  1.189000e-05               0.00%\n",
      "19            Weighted Average Shs Out  4.617834e+03               1.77%\n",
      "20      Weighted Average Shs Out (Dil)  4.648913e+03               1.79%\n",
      "21                  Dividend per Share  3.037054e-06               0.00%\n",
      "22                        Gross Margin  3.781777e-07               0.00%\n",
      "23                       EBITDA Margin  2.939456e-07               0.00%\n",
      "24                         EBIT Margin  2.457202e-07               0.00%\n",
      "25                       Profit Margin  2.123809e-07               0.00%\n",
      "26               Free Cash Flow margin  2.263716e-07               0.00%\n",
      "27                              EBITDA  7.647700e+04              29.39%\n",
      "28                                EBIT  6.393000e+04              24.57%\n",
      "29                 Consolidated Income  5.525600e+04              21.24%\n",
      "30          Earnings Before Tax Margin  2.526655e-07               0.00%\n",
      "31                   Net Profit Margin  2.123809e-07               0.00%\n",
      "\n",
      "AAPL Cash Flow Statement 2019\n",
      "date                            index  in million $\n",
      "1         Depreciation & Amortization       12547.0\n",
      "2            Stock-based compensation        6068.0\n",
      "3                 Operating Cash Flow       69391.0\n",
      "4                 Capital Expenditure       10495.0\n",
      "5          Acquisitions and disposals        -624.0\n",
      "6      Investment purchases and sales       -8804.0\n",
      "7                 Investing Cash flow       45896.0\n",
      "8        Issuance (repayment) of debt       -8805.0\n",
      "9       Issuance (buybacks) of shares      -66116.0\n",
      "10                  Dividend payments      -14119.0\n",
      "11                Financing Cash Flow      -90976.0\n",
      "12    Effect of forex changes on cash           0.0\n",
      "13     Net cash flow / Change in cash       24311.0\n",
      "14                     Free Cash Flow       58896.0\n",
      "15                 Net Cash/Marketcap           0.0\n",
      "\n",
      "AAPL Enterprise Values 2019\n",
      "date                      index  in million $\n",
      "1                   Stock Price  2.490500e-04\n",
      "2              Number of Shares  4.617834e+03\n",
      "3         Market Capitalization  1.150072e+06\n",
      "4     - Cash & Cash Equivalents  4.884400e+04\n",
      "5                  + Total Debt  1.020670e+05\n",
      "6              Enterprise Value  1.203295e+06\n",
      "\n",
      "AAPL Key Metrics 2019\n",
      "date                                index          AAPL\n",
      "1                       Revenue per Share  5.634113e+01\n",
      "2                    Net Income per Share  1.196578e+01\n",
      "3           Operating Cash Flow per Share  1.502674e+01\n",
      "4                Free Cash Flow per Share  1.275403e+01\n",
      "5                          Cash per Share  1.057725e+01\n",
      "6                    Book Value per Share  1.959533e+01\n",
      "7           Tangible Book Value per Share  7.330623e+01\n",
      "8           Shareholders Equity per Share  1.959533e+01\n",
      "9                 Interest Debt per Share  2.287718e+01\n",
      "10                             Market Cap  1.150072e+12\n",
      "11                       Enterprise Value  1.203295e+12\n",
      "12                               PE ratio  2.081351e+01\n",
      "13                   Price to Sales Ratio  4.420394e+00\n",
      "14                             POCF ratio  1.657379e+01\n",
      "15                             PFCF ratio  1.952716e+01\n",
      "16                               PB ratio  1.270966e+01\n",
      "17                              PTB ratio  1.270966e+01\n",
      "18                            EV to Sales  4.624961e+00\n",
      "19           Enterprise Value over EBITDA  1.573407e+01\n",
      "20              EV to Operating cash flow  1.734079e+01\n",
      "21                   EV to Free cash flow  2.043084e+01\n",
      "22                         Earnings Yield  4.804571e-02\n",
      "23                   Free Cash Flow Yield  5.121073e-02\n",
      "24                         Debt to Equity  2.741004e+00\n",
      "25                         Debt to Assets  7.326921e-01\n",
      "26                     Net Debt to EBITDA  6.959347e-01\n",
      "27                          Current ratio  1.540126e+00\n",
      "28                      Interest Coverage  1.787752e+01\n",
      "29                         Income Quality  1.255809e+00\n",
      "30                         Dividend Yield  1.227663e-02\n",
      "31                           Payout Ratio  2.555198e-01\n",
      "32                        SG&A to Revenue  7.012615e-02\n",
      "33                         R&D to Revenue  7.012615e-02\n",
      "34            Intangibles to Total Assets  0.000000e+00\n",
      "35           Capex to Operating Cash Flow  6.611815e+00\n",
      "36                       Capex to Revenue  2.479028e+01\n",
      "37                  Capex to Depreciation  1.195522e+00\n",
      "38    Stock-based compensation to Revenue  2.332285e-02\n",
      "39                          Graham Number  7.263370e+01\n",
      "40                                   ROIC  2.746158e-01\n",
      "41              Return on Tangible Assets  1.632301e-01\n",
      "42                         Graham Net-Net -2.776702e+01\n",
      "43                        Working Capital  5.710100e+10\n",
      "44                   Tangible Asset Value  3.385160e+11\n",
      "45                Net Current Asset Value -8.520900e+10\n",
      "46                       Invested Capital  2.920010e+11\n",
      "47                    Average Receivables  2.305600e+10\n",
      "48                       Average Payables  5.106200e+10\n",
      "49                      Average Inventory  4.031000e+09\n",
      "50                 Days Sales Outstanding  3.216305e+01\n",
      "51              Days Payables Outstanding  1.043141e+02\n",
      "52              Days of Inventory on Hand  9.263639e+00\n",
      "53                   Receivables Turnover  1.134843e+01\n",
      "54                      Payables Turnover  3.499048e+00\n",
      "55                     Inventory Turnover  3.940136e+01\n",
      "56                                    ROE  6.106445e-01\n",
      "57                        Capex per Share  2.272711e+00\n",
      "\n",
      "AAPL Historic Prices & DCF Values in $\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 972x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import requests\n",
    "import json\n",
    "from tkinter import *\n",
    "import matplotlib.pyplot as plt\n",
    "get_ipython().run_line_magic('matplotlib', 'inline')\n",
    "\n",
    "\n",
    "\n",
    "#Intro text\n",
    "print(\"Hello User! With this programm you will be able to choose between a variety of public stocks from different exchanges before easily analysing the underlying company.\")\n",
    "\n",
    "#Update: Since recently Financial Modelling Prep requires an individual API-Key. Therefore we first have to ask the user to enter his API-Key from Financial Modelling Prep in order to being able to access the required links\n",
    "#On https://financialmodelingprep.com/developer/docs/ everyone can create an account for free and will immediately receive an individual API-Key\n",
    "API_Key = input(\"Please enter your individual API-Key from Financial Modelling Prep in order to access the data (e.g. 4e20e35a9763edf292366927d58a3614):\")\n",
    "\n",
    "#show the user a list of the exchanges which are available to this programm, so that he can then choose one\n",
    "#receive a list of all available stocks from the API financialmodelingprep\n",
    "available_symbols = requests.get(f'https://financialmodelingprep.com/api/v3/company/stock/list?apikey={API_Key}')\n",
    "\n",
    "#translate the data into json\n",
    "available_symbols = available_symbols.json()\n",
    "\n",
    "#receive the symbolList data in specific\n",
    "available_symbols = available_symbols['symbolsList']\n",
    "\n",
    "#translate the data into a dictionary in order to make it easily accessible\n",
    "symbols = pd.DataFrame.from_dict(available_symbols)\n",
    "\n",
    "#get rid of rows with no values or NaN values as names\n",
    "symbols = symbols.dropna()\n",
    "symbols = symbols[symbols.name != '']\n",
    "\n",
    "#get rid of row with ETF's, Fund's and \"%\", since there we can't analyse financials (e.g. balance sheets)\n",
    "symbols = symbols[~symbols.name.str.contains(\"ETF\")]\n",
    "symbols = symbols[~symbols.name.str.contains(\"Fund\")]\n",
    "symbols = symbols[~symbols.name.str.contains(\"%\")]\n",
    "\n",
    "#get rid of the column with prices and swap the column with names of and symbols\n",
    "symbols = symbols[symbols.columns.drop('price')]\n",
    "symbols = symbols[['name','symbol','exchange']]\n",
    "\n",
    "#now we want to show to the user which exchanges are available that he can choose from\n",
    "#therefore we select the column \"exchange\", put the values in an alphabetical order and remove duplicates. Then reset the index.\n",
    "exchanges = symbols.iloc[:,2:3]\n",
    "exchanges = exchanges.sort_values(by='exchange', ascending=True)\n",
    "exchanges = exchanges.drop_duplicates(subset='exchange', keep=\"first\")\n",
    "exchanges.reset_index(inplace=True)\n",
    "exchanges = exchanges.iloc[:,1:2]\n",
    "\n",
    "#There are certain exchanges we will have to exclude, because they cause problems for this program (e.g. due to missing data). Then reset index again.\n",
    "exchanges = exchanges.drop(exchanges.index[[0,1,2,3,4,5,6,8,9,10,11,12,16,18,19,20,21]])\n",
    "exchanges.reset_index(inplace=True)\n",
    "exchanges = exchanges.iloc[:,1:2]\n",
    "\n",
    "print(\"\")\n",
    "print(\"These are the exchanges:\")\n",
    "print(exchanges)\n",
    "print(\"\")\n",
    "\n",
    "\n",
    "#now the user can select an exchange by by entering the name in the list. The programm will then show him the available stocks from this exchange.\n",
    "chosen_exchange = input(\"Enter the name of the exchange you want to see in detail (e.g. NYSE): \")\n",
    "\n",
    "#select only the rows from our DataFrame \"symbols\" with the exchange which was chosen by the user\n",
    "chosen_stocks = symbols.loc[symbols['exchange'] == chosen_exchange]\n",
    "\n",
    "#remove the name of the exchange, sort the stocks in alphabetical order and reset the index\n",
    "chosen_stocks = chosen_stocks.iloc[:,0:2]\n",
    "chosen_stocks = chosen_stocks.sort_values(by='name', ascending=True)\n",
    "chosen_stocks.reset_index(inplace=True)\n",
    "chosen_stocks = chosen_stocks.iloc[:,1:3]\n",
    "\n",
    "#we use to_string() to show the entire list and not just the values in the beginning and end\n",
    "print(\"\")\n",
    "print(\"These are the available stocks in\", chosen_exchange,\":\")\n",
    "print(\"\")\n",
    "print(chosen_stocks.to_string())\n",
    "\n",
    "\n",
    "#for the following step we use a loop with try/except in order to make sure that problems with a specific company/company symbol don't let the program crash.\n",
    "while True:\n",
    "    try:\n",
    "        #now the user can choose a company he would like to analyse by entering the symbol\n",
    "        company = input(\"Enter the symbol of the company you would like to analyse (e.g. AAPL): \")\n",
    "        print(\"\")\n",
    "\n",
    "        \n",
    "        #in order to being able to change the symbol of a company easily we will define functions which we will refer to when obtaining data of a specific data\n",
    "        #receiving data which is relevant for calculating the enterprise value of the company\n",
    "        def enterprisevalues(quote):\n",
    "\n",
    "            #receive the balance sheet on an annual basis from the API financialmodelingprep\n",
    "            enterprise_values = requests.get(f'https://financialmodelingprep.com/api/v3/enterprise-value/{quote}?apikey={API_Key}')\n",
    "\n",
    "            #translate the data into a dictionary in order to make it easily accessible\n",
    "            enterprise_values = enterprise_values.json()\n",
    "\n",
    "            #receive the financials data in specific\n",
    "            enterprise_values = enterprise_values['enterpriseValues']\n",
    "\n",
    "            #translate the data into a pandas dictionary\n",
    "            stock = pd.DataFrame.from_dict(enterprise_values)\n",
    "            stock = stock.T\n",
    "\n",
    "            #change the naming of the columns to the dates and reset the index\n",
    "            stock.columns = stock.iloc[0]\n",
    "            stock.reset_index(inplace=True)\n",
    "\n",
    "            #select only data from the latest year\n",
    "            stock = stock.iloc[:,0:2]\n",
    "            stock = stock.rename(columns={stock.columns[1]:'in million $'})\n",
    "\n",
    "            #in order to be able to make operations we select the columns which include numbers as values and then convert their type from objects to numbers\n",
    "            cols = stock.columns.drop('index')\n",
    "            stock[cols] = stock[cols].apply(pd.to_numeric, errors='coerce')\n",
    "\n",
    "            #exclude the unnecessary second row which mainly includes NaN's\n",
    "            stock = stock.iloc[1:,:]\n",
    "            \n",
    "            #show the values in million dollars\n",
    "            stock[\"in million $\"] = stock['in million $']/ 1000000\n",
    "\n",
    "            return stock\n",
    "        \n",
    "        company_ev = enterprisevalues(company)\n",
    "        \n",
    "        \n",
    "        #receiving data about key metrics of the company\n",
    "        def keymetrics(quote):\n",
    "\n",
    "            #receive the balance sheet on an annual basis from the API financialmodelingprep\n",
    "            key_metrics = requests.get(f'https://financialmodelingprep.com/api/v3/company-key-metrics/{quote}?apikey={API_Key}')\n",
    "\n",
    "            #translate the data into a dictionary in order to make it easily accessible\n",
    "            key_metrics = key_metrics.json()\n",
    "\n",
    "            #receive the financials data in specific\n",
    "            key_metrics = key_metrics['metrics']\n",
    "\n",
    "            #translate the data into a pandas dictionary\n",
    "            stock = pd.DataFrame.from_dict(key_metrics)\n",
    "            stock = stock.T\n",
    "\n",
    "            #change the naming of the columns to the dates and reset the index\n",
    "            stock.columns = stock.iloc[0]\n",
    "            stock.reset_index(inplace=True)\n",
    "\n",
    "            #select only data from the latest year\n",
    "            stock = stock.iloc[:,0:2]\n",
    "            stock = stock.rename(columns={stock.columns[1]:quote})\n",
    "\n",
    "            #in order to be able to make operations we select the columns which include numbers as values and then convert their type from objects to numbers\n",
    "            cols = stock.columns.drop('index')\n",
    "            stock[cols] = stock[cols].apply(pd.to_numeric, errors='coerce')\n",
    "\n",
    "            #exclude the unnecessary second row which mainly includes NaN's\n",
    "            stock = stock.iloc[1:,:]\n",
    "            \n",
    "            return stock\n",
    "        \n",
    "        company_km = keymetrics(company)\n",
    "        \n",
    "        \n",
    "        #receiving data from the balance sheet\n",
    "        def balancesheet(quote):\n",
    "\n",
    "            #receive the balance sheet on an annual basis from the API financialmodelingprep\n",
    "            annual_balancesheet = requests.get(f'https://financialmodelingprep.com/api/v3/financials/balance-sheet-statement/{quote}?apikey={API_Key}')\n",
    "\n",
    "            #translate the data into a dictionary in order to make it easily accessible\n",
    "            annual_balancesheet = annual_balancesheet.json()\n",
    "\n",
    "            #receive the financials data in specific\n",
    "            annual_balancesheet = annual_balancesheet['financials']\n",
    "\n",
    "            #translate the data into a pandas dictionary\n",
    "            stock = pd.DataFrame.from_dict(annual_balancesheet)\n",
    "            stock = stock.T\n",
    "\n",
    "            #change the naming of the columns to the dates and reset the index\n",
    "            stock.columns = stock.iloc[0]\n",
    "            stock.reset_index(inplace=True)\n",
    "\n",
    "            #select only data from the latest year and change the title to \"in million $\"\n",
    "            stock = stock.iloc[:,0:2]\n",
    "            stock = stock.rename(columns={stock.columns[1]:'in million $'})\n",
    "\n",
    "            #in order to be able to make operations we select the columns which include numbers as values and then convert their type from objects to numbers\n",
    "            cols = stock.columns.drop('index')\n",
    "            stock[cols] = stock[cols].apply(pd.to_numeric, errors='coerce')\n",
    "\n",
    "            #exclude the unnecessary second row which mainly includes NaN's\n",
    "            stock = stock.iloc[1:,:]\n",
    "\n",
    "            #show the values in million dollars\n",
    "            stock[\"in million $\"] = stock['in million $']/ 1000000\n",
    "\n",
    "            #we want to receive the values as a percentage of total assets\n",
    "            stock['% of Total Assets'] = stock[\"in million $\"]/ stock.iloc[11,1]\n",
    "            stock['% of Total Assets'] = pd.Series([\"{0:.2f}%\".format(val *100) for val in stock['% of Total Assets']], index = stock.index)\n",
    "\n",
    "            return stock\n",
    "        \n",
    "        company_bs = balancesheet(company)\n",
    "        \n",
    "        \n",
    "        #receiving data from the income statement\n",
    "        def incomestatement(quote):\n",
    " \n",
    "            #receive the income statement on an annual basis from the API financialmodelingprep\n",
    "            annual_incomestatement = requests.get(f'https://financialmodelingprep.com/api/v3/financials/income-statement/{quote}?apikey={API_Key}')\n",
    "\n",
    "            #translate the data into a dictionary in order to make it easily accessible\n",
    "            annual_incomestatement = annual_incomestatement.json()\n",
    "\n",
    "            #receive the financials data in specific\n",
    "            annual_incomestatement = annual_incomestatement['financials']\n",
    "\n",
    "            #translate the data into a pandas dictionary\n",
    "            stock = pd.DataFrame.from_dict(annual_incomestatement)\n",
    "            stock = stock.T\n",
    "\n",
    "            #change the naming of the columns to the dates and reset the index\n",
    "            stock.columns = stock.iloc[0]\n",
    "            stock.reset_index(inplace=True)\n",
    "\n",
    "            #select only data from the latest year and change the title to \"in million $\"\n",
    "            stock = stock.iloc[:,0:2]\n",
    "            stock = stock.rename(columns={stock.columns[1]:\"in million $\"})\n",
    "\n",
    "            #in order to be able to make operations we select the columns which include numbers as values and then convert their type from objects to numbers\n",
    "            cols = stock.columns.drop('index')\n",
    "            stock[cols] = stock[cols].apply(pd.to_numeric, errors='coerce')\n",
    "\n",
    "            #replace the unnecessary second row which mainly includes NaN's\n",
    "            stock = stock.iloc[1:,:]\n",
    "\n",
    "            #show the values in million dollars\n",
    "            stock[\"in million $\"] = stock[\"in million $\"]/ 1000000\n",
    "\n",
    "            #we want to receive the values as a percentage of total revenues\n",
    "            stock['% of Total Revenues'] = stock[\"in million $\"]/ stock.iloc[0,1]\n",
    "            stock['% of Total Revenues'] = pd.Series([\"{0:.2f}%\".format(val *100) for val in stock['% of Total Revenues']], index = stock.index)\n",
    "\n",
    "            return stock\n",
    "        \n",
    "        company_is = incomestatement(company)\n",
    "\n",
    "        \n",
    "        #receiving data from the cash flow statement\n",
    "        def cashflowstatement(quote):\n",
    " \n",
    "            #receive the cash flow statement on an annual basis from the API financialmodelingprep\n",
    "            annual_cashflowstatement = requests.get(f'https://financialmodelingprep.com/api/v3/financials/cash-flow-statement/{quote}?apikey={API_Key}')\n",
    "\n",
    "            #translate the data into a dictionary in order to make it easily accessible\n",
    "            annual_cashflowstatement = annual_cashflowstatement.json()\n",
    "\n",
    "            #receive the financials data in specific\n",
    "            annual_cashflowstatement = annual_cashflowstatement['financials']\n",
    "\n",
    "            #translate the data into a pandas dictionary\n",
    "            stock = pd.DataFrame.from_dict(annual_cashflowstatement)\n",
    "            stock = stock.T\n",
    "\n",
    "            #change the naming of the columns to the dates and reset the index\n",
    "            stock.columns = stock.iloc[0]\n",
    "            stock.reset_index(inplace=True)\n",
    "\n",
    "            #select only data from the latest year and change the title to \"in million $\"\n",
    "            stock = stock.iloc[:,0:2]\n",
    "            stock = stock.rename(columns={stock.columns[1]:\"in million $\"})\n",
    "\n",
    "            #in order to be able to make operations we select the columns which include numbers as values and then convert their type from objects to numbers\n",
    "            cols = stock.columns.drop('index')\n",
    "            stock[cols] = stock[cols].apply(pd.to_numeric, errors='coerce')\n",
    "\n",
    "            #exclude the unnecessary second row which mainly includes NaN's\n",
    "            stock = stock.iloc[1:,:]\n",
    "\n",
    "            #show the values in million dollars\n",
    "            stock[\"in million $\"] = stock[\"in million $\"]/ 1000000\n",
    "\n",
    "            return stock\n",
    "        \n",
    "        company_cf = cashflowstatement(company)\n",
    "        \n",
    "\n",
    "        #receiving data about the historic price as well as the DCF value\n",
    "        def historicprices(quote):\n",
    " \n",
    "            #receive information about stock price and DCF value on a quarterly basis from the API financialmodelingprep. Also get today's values.\n",
    "            annual_historicprices = requests.get(f'https://financialmodelingprep.com/api/v3/company/historical-discounted-cash-flow/{quote}?period=quarter&apikey={API_Key}')\n",
    "\n",
    "            #translate the data into a dictionary in order to make it easily accessible\n",
    "            annual_historicprices = annual_historicprices.json()\n",
    "\n",
    "            #receive the historicalDCF data in specific\n",
    "            annual_historicprices = annual_historicprices[\"historicalDCF\"]\n",
    "\n",
    "            #translate the data into pandas dictionaries\n",
    "            stock = pd.DataFrame.from_dict(annual_historicprices)\n",
    "\n",
    "            #as the index is from the most recent date we make the first entry the oldest date.\n",
    "            stock = stock.sort_index(ascending = False)\n",
    "\n",
    "            #reset the index\n",
    "            stock.reset_index(inplace=True)\n",
    "\n",
    "            #exclude the unnecessary first column\n",
    "            stock = stock.iloc[:,1:]\n",
    "\n",
    "            #in order to be able to make operations we select the columns which include numbers as values and then convert their type from objects to numbers\n",
    "            stock[['Stock Price', 'DCF']] = stock[['Stock Price', 'DCF']].apply(pd.to_numeric, errors='coerce')\n",
    "\n",
    "            # Plot the two prices to find potential differences between intrinsic value and market price.\n",
    "            visual = stock.plot(x='date', figsize=(13.5, 9))\n",
    "            visual = plt.plot('Stock Price', data=stock, marker='', color='skyblue', linewidth=2)\n",
    "            visual = plt.plot('DCF', data=stock, marker='', color='orange', linewidth=2)\n",
    "\n",
    "            return visual\n",
    "        \n",
    "        company_hp = historicprices(company)\n",
    "        \n",
    "\n",
    "        #receive the current stock price\n",
    "        def stockprice(quote):\n",
    "\n",
    "            r = requests.get(f'https://financialmodelingprep.com/api/v3/stock/real-time-price/{quote}?apikey={API_Key}')\n",
    "            r = r.json()\n",
    "            r = r['price']\n",
    "            return r\n",
    "\n",
    "        company_rsp = stockprice(company)\n",
    "\n",
    "        #isolate the Market Capitalisation from 2019\n",
    "        MarketCap = company_km.iat[9,1]\n",
    "        MarketCap = MarketCap/1000000\n",
    "        MarketCap = round(MarketCap, 1)\n",
    "        MarketCap = (str(MarketCap) + \" mil. $\")\n",
    "        \n",
    "        #isolate the Price to Earnings Ratio from 2019\n",
    "        PriceEarnings = company_km.iat[11,1]\n",
    "        PriceEarnings = round(PriceEarnings, 2)\n",
    "        PriceEarnings = (str(PriceEarnings) + \"x\")\n",
    "        \n",
    "        #isolate the Dividend Yield from 2019\n",
    "        DividendYield = company_km.iat[29,1]\n",
    "        DividendYield = DividendYield*100\n",
    "        DividendYield = round(DividendYield, 2)\n",
    "        DividendYield = (str(DividendYield) + \"%\")\n",
    "        \n",
    "        #isolate the Net Profit Margin from 2019\n",
    "        NetProfitMargin = company_is.iat[30,1]\n",
    "        NetProfitMargin = NetProfitMargin*1000000\n",
    "        NetProfitMargin = NetProfitMargin*100\n",
    "        NetProfitMargin = round(NetProfitMargin, 2)\n",
    "        NetProfitMargin = (str(NetProfitMargin) + \"%\")\n",
    "        \n",
    "        #isolate the Current Ratio from 2019\n",
    "        CurrentRatio = company_km.iat[26,1]\n",
    "        CurrentRatio = round(CurrentRatio, 2)\n",
    "        CurrentRatio = (str(CurrentRatio) + \"x\")\n",
    "        \n",
    "        #isolate Return on Equity from 2019\n",
    "        ROE = company_km.iat[55,1]\n",
    "        ROE = ROE*100\n",
    "        ROE = round(ROE, 2)\n",
    "        ROE = (str(ROE) + \"%\")\n",
    "\n",
    "\n",
    "        #we want to first show the main information about the stock in a window. Therefore we show some values in a pop-up window.\n",
    "        #creating the window\n",
    "        my_window = Tk()\n",
    "        frame_name = Frame(my_window)\n",
    "\n",
    "        #defining which content is placed in the window\n",
    "        company_text = Label(frame_name , text = \"Company symbol:\")\n",
    "        company_name = Label(frame_name , text = company)\n",
    "        \n",
    "        \n",
    "        stock_text = Label(frame_name , text = \"Current price:\")\n",
    "        stock_name = Label(frame_name , text = company_rsp)\n",
    "        \n",
    "        MarketCap_text = Label(frame_name , text = \"Market Capitalization (2019):\")\n",
    "        MarketCap_value = Label(frame_name , text = MarketCap)\n",
    "        \n",
    "        PriceEarnings_text = Label(frame_name , text = \"Price Earnings (2019):\")\n",
    "        PriceEarnings_value = Label(frame_name , text = PriceEarnings)\n",
    "        \n",
    "        DividendYield_text = Label(frame_name , text = \"Dividend Yield (2019):\")\n",
    "        DividendYield_value = Label(frame_name , text = DividendYield)\n",
    "        \n",
    "        NetProfitMargin_text = Label(frame_name , text = \"Net Profit Margin (2019):\")\n",
    "        NetProfitMargin_value = Label(frame_name , text = NetProfitMargin)\n",
    "        \n",
    "        CurrentRatio_text = Label(frame_name , text = \"Current Ratio (2019):\")\n",
    "        CurrentRatio_value = Label(frame_name , text = CurrentRatio)\n",
    "        \n",
    "        ROE_text = Label(frame_name , text = \"ROE (2019):\")\n",
    "        ROE_value = Label(frame_name , text = ROE)\n",
    "        \n",
    "        next_button = Button(frame_name , text = \"show more details\", command = my_window.destroy)\n",
    "\n",
    "        #defining where the content is shown in the window\n",
    "        company_text.grid(row=0, column=0)\n",
    "        company_name.grid(row=0, column=1)\n",
    "        \n",
    "        stock_text.grid(row=1, column=0)\n",
    "        stock_name.grid(row=1, column=1)\n",
    "        \n",
    "        MarketCap_text.grid(row=2, column=0)\n",
    "        MarketCap_value.grid(row=2, column=1)\n",
    "        \n",
    "        PriceEarnings_text.grid(row=3, column=0)\n",
    "        PriceEarnings_value.grid(row=3, column=1)\n",
    "        \n",
    "        DividendYield_text.grid(row=4, column=0)\n",
    "        DividendYield_value.grid(row=4, column=1)\n",
    "        \n",
    "        NetProfitMargin_text.grid(row=5, column=0)\n",
    "        NetProfitMargin_value.grid(row=5, column=1)\n",
    "        \n",
    "        CurrentRatio_text.grid(row=6, column=0)\n",
    "        CurrentRatio_value.grid(row=6, column=1)\n",
    "        \n",
    "        ROE_text.grid(row=7, column=0)\n",
    "        ROE_value.grid(row=7, column=1)\n",
    "        \n",
    "        next_button.grid(row=8, columnspan=2)\n",
    "\n",
    "        #showing the frame, and changing the title\n",
    "        frame_name.grid(row=0, column=0)\n",
    "        my_window.title('Company Overview')\n",
    "        my_window.mainloop()\n",
    "\n",
    "\n",
    "\n",
    "        #now we print all the predetermined output\n",
    "        \n",
    "        print(\"\")\n",
    "        print(company, \"Balance Sheet 2019\")\n",
    "        print(company_bs)\n",
    "\n",
    "        \n",
    "        print(\"\")\n",
    "        print(company, \"Income Statement 2019\")\n",
    "        print(company_is)\n",
    "\n",
    "        \n",
    "        print(\"\")\n",
    "        print(company, \"Cash Flow Statement 2019\")\n",
    "        print(company_cf)\n",
    "\n",
    "        \n",
    "        print(\"\")\n",
    "        print(company, \"Enterprise Values 2019\")\n",
    "        print(company_ev)\n",
    "        \n",
    "        \n",
    "        print(\"\")\n",
    "        print(company, \"Key Metrics 2019\")\n",
    "        print(company_km) \n",
    "        \n",
    "        \n",
    "        print(\"\")\n",
    "        print(company, \"Historic Prices & DCF Values in $\")\n",
    "\n",
    "        break\n",
    "    \n",
    "    except:\n",
    "        print(\"This symbol is not compatible with this program. Please try another symbol...\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
